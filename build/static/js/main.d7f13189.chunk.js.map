{"version":3,"sources":["assets/images/logo.svg","assets/images/blue-marker.svg","components/TopBar.js","constants.js","components/Register.js","components/Login.js","components/Gallery.js","components/CreatePostForm.js","components/CreatePostButton.js","components/AroundMarker.js","components/AroundMap.js","components/Home.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","className","src","logo","alt","this","props","isLoggedIn","onClick","handleLogout","type","React","Component","API_ROOT","TOKEN_KEY","GEO_OPTIONS","enableHighAccuracy","maximumAge","timeout","POST_TYPE_VIDEO","POST_TYPE_UNKNOWN","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","message","success","history","push","catch","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","getFieldDecorator","tailFormItemLayout","wrapperCol","xs","span","offset","sm","labelCol","onSubmit","Item","label","rules","required","hasFeedback","validator","Password","onBlur","htmlType","Link","to","Register","Form","create","name","NormalLoginForm","stateText","handleLoginSucceed","prefix","style","color","placeholder","Login","Gallery","images","map","image","customOverlay","captionStyle","user","caption","wrapperStyle","backdropClosesModal","enableImageSelection","display","minHeight","width","border","overflow","backgroundColor","maxHeight","position","bottom","padding","fontSize","NormalCreatePostForm","normFile","Array","isArray","fileList","beforeUpload","formItemLayout","valuePropName","getValueFromEvent","Dragger","CreatePostForm","CreatePostButton","visible","confirmLoading","showModal","handleOk","token","localStorage","getItem","parse","lat","lon","formData","FormData","set","Math","random","originFileObj","headers","Authorization","loadPostsByTopic","resetFields","handleCancel","getFormRef","formInstance","title","onOk","okText","onCancel","ref","AroundMarker","isOpen","handleToggle","prevState","post","url","location","isImagePost","customIcon","undefined","blueMarkerUrl","scaledSize","window","google","maps","Size","lng","onMouseOver","onMouseOut","icon","controls","NormalAroundMap","reloadMarker","center","getCenter","radius","getRadius","getMapRef","mapInstance","bounds","getBounds","ne","getNorthEast","right","LatLng","geometry","spherical","computeDistanceBetween","defaultZoom","defaultCenter","onDragEnd","onZoomChanged","posts","key","AroundMap","withScriptjs","withGoogleMap","TabPane","Tabs","Home","isLoadingGeoLocation","isLoadingPosts","topic","onSuccessLoadGeoLocation","coords","latitude","longitude","setItem","loadNearbyPosts","onFailedLoadGeoLocation","range","json","handleTopicChange","loadFacesAroundTheWolrd","navigator","geolocation","getCurrentPosition","filter","thumbnail","thumbnailWidth","thumbnailHeight","gutter","includes","tip","length","renderImagePosts","renderVideoPosts","operations","Group","onChange","tabBarExtraContent","tab","renderPosts","googleMapURL","loadingElement","height","containerElement","mapElement","Main","getLogin","getHome","exact","path","render","component","App","Boolean","removeItem","hostname","match","ReactDOM","BrowserRouter","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7f13189.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-marker.bc8cc4ea.svg\";","import React from 'react';\r\nimport logo from '../assets/images/logo.svg';\r\nimport { Icon } from 'antd';\r\n\r\nexport class TopBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <span className=\"App-title\">Around</span>\r\n                {this.props.isLoggedIn ?\r\n                    <a className=\"logout\" onClick={this.props.handleLogout} >\r\n                        <Icon type=\"logout\"/>{' '}Logout\r\n                    </a> : null}\r\n            </header>\r\n        );\r\n    }\r\n}","export const API_ROOT = 'https://around-179500.appspot.com';\r\n//export const API_ROOT = 'https://around-179500.uc.r.appspot.com';\r\nexport const TOKEN_KEY = 'TOKEN_KEY';\r\nexport const GEO_OPTIONS = {\r\n    enableHighAccuracy: true,\r\n    maximumAge        : 300000,\r\n    timeout           : 27000,\r\n};\r\nexport const POS_KEY = 'POS_KEY';\r\nexport const AUTH_HEADER = 'Bearer';\r\nexport const POST_TYPE_IMAGE = 'image';\r\nexport const POST_TYPE_VIDEO = 'video';\r\nexport const POST_TYPE_UNKNOWN = 'unknown';\r\nexport const LOC_SHAKE = 0.02;\r\nexport const TOPIC_AROUND = 'around';\r\nexport const TOPIC_FACE = 'face';\r\n","import React from 'react';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { API_ROOT } from '../constants';\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                fetch(`${API_ROOT}/signup`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return response.text();\r\n                        }\r\n                        throw new Error(response.statusText);\r\n                    })\r\n                    .then((data) => {\r\n                        console.log(data);\r\n                        message.success('Registration succeed!');\r\n                        this.props.history.push('/login');\r\n                    })\r\n                    .catch((err) => {\r\n                        console.error(err);\r\n                        message.error('Registration failed.');\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                >\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                            {\r\n                                validator: this.validateToNextPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\r\n","import React from 'react';\r\nimport { Form, Icon, Input, Button, message } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { API_ROOT } from '../constants';\r\n\r\nclass NormalLoginForm extends React.Component {\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                fetch(`${API_ROOT}/login`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return response.text();\r\n                        }\r\n                        throw new Error(response.stateText);\r\n                    })\r\n                    .then((data) => {\r\n                        console.log(data);\r\n                        this.props.handleLoginSucceed(data);\r\n                        message.success('Login succeed!');\r\n                    })\r\n                    .catch((err) => {\r\n                        console.error(err);\r\n                        message.error('Login failed.');\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <Form.Item>\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            placeholder=\"Username\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{ required: true, message: 'Please input your Password!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                    Or <Link to=\"/register\">register now!</Link>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Login = Form.create({ name: 'normal_login' })(NormalLoginForm);","import React, { Component }from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GridGallery from 'react-grid-gallery';\r\n\r\nexport class Gallery extends Component {\r\n    static propTypes = {\r\n        images: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                user: PropTypes.string.isRequired,\r\n                src: PropTypes.string.isRequired,\r\n                thumbnail: PropTypes.string.isRequired,\r\n                caption: PropTypes.string,\r\n                thumbnailWidth: PropTypes.number.isRequired,\r\n                thumbnailHeight: PropTypes.number.isRequired\r\n            })\r\n        ).isRequired\r\n    }\r\n\r\n    render() {\r\n        const images = this.props.images.map((image) => {\r\n            return {\r\n                ...image,\r\n                customOverlay: (\r\n                    <div style={captionStyle}>\r\n                        <div>{`${image.user}: ${image.caption}`}</div>\r\n                    </div>\r\n                ),\r\n            };\r\n        });\r\n\r\n        return (\r\n            <div style={wrapperStyle}>\r\n                <GridGallery\r\n                    backdropClosesModal\r\n                    images={images}\r\n                    enableImageSelection={false}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst wrapperStyle = {\r\n    display: \"block\",\r\n    minHeight: \"1px\",\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    overflow: \"auto\"\r\n};\r\n\r\nconst captionStyle = {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n    maxHeight: \"240px\",\r\n    overflow: \"hidden\",\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    color: \"white\",\r\n    padding: \"2px\",\r\n    fontSize: \"90%\"\r\n};\r\n","import React from 'react';\r\nimport { Form, Input, Upload, Icon } from 'antd';\r\n\r\nclass NormalCreatePostForm extends React.Component {\r\n    normFile = e => {\r\n        console.log('Upload event:', e);\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    beforeUpload = () => false;\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        };\r\n        return (\r\n            <Form {...formItemLayout}>\r\n                <Form.Item label=\"Message\">\r\n                    {getFieldDecorator('message', {\r\n                        rules: [{ required: true, message: 'Please input message.' }],\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Image/Video\">\r\n                    <div className=\"dropbox\">\r\n                        {getFieldDecorator('image', {\r\n                            valuePropName: 'fileList',\r\n                            getValueFromEvent: this.normFile,\r\n                            rules: [{ required: true, message: 'Please select an image.' }]\r\n                        })(\r\n                            <Upload.Dragger name=\"files\" beforeUpload={this.beforeUpload}>\r\n                                <p className=\"ant-upload-drag-icon\">\r\n                                    <Icon type=\"inbox\" />\r\n                                </p>\r\n                                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                                <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\r\n                            </Upload.Dragger>,\r\n                        )}\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const CreatePostForm = Form.create()(NormalCreatePostForm);\r\n","import React from 'react';\r\nimport { Modal, Button, message } from 'antd';\r\nimport { CreatePostForm } from './CreatePostForm';\r\nimport { API_ROOT, AUTH_HEADER, TOKEN_KEY, POS_KEY, LOC_SHAKE, TOPIC_AROUND } from '../constants';\r\n\r\nexport class CreatePostButton extends React.Component {\r\n    state = {\r\n        visible: false,\r\n        confirmLoading: false,\r\n    };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    handleOk = () => {\r\n        this.form.validateFields((err, values) => {\r\n            console.log(values);\r\n            if (!err) {\r\n                const token = localStorage.getItem(TOKEN_KEY);\r\n                const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\r\n\r\n                const formData = new FormData();\r\n                formData.set('lat', lat + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\r\n                formData.set('lon', lon + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\r\n                formData.set('message', values.message);\r\n                formData.set('image', values.image[0].originFileObj);\r\n\r\n                this.setState({ confirmLoading: true });\r\n                fetch(`${API_ROOT}/post`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `${AUTH_HEADER} ${token}`\r\n                    },\r\n                    body: formData,\r\n                })\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return this.props.loadPostsByTopic();\r\n                        }\r\n                        throw new Error('Failed to create post.');\r\n                    })\r\n                    .then(() => {\r\n                        this.setState({ visible: false, confirmLoading: false });\r\n                        this.form.resetFields();\r\n                        message.success('Post created successfully!');\r\n                    })\r\n                    .catch((e) => {\r\n                        console.error(e);\r\n                        message.error('Failed to create post.');\r\n                        this.setState({ confirmLoading: false });\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        console.log('Clicked cancel button');\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    getFormRef = (formInstance) => {\r\n        this.form = formInstance;\r\n    }\r\n\r\n    render() {\r\n        const { visible, confirmLoading } = this.state;\r\n        return (\r\n            <div>\r\n                <Button type=\"primary\" onClick={this.showModal}>\r\n                    Create New Post\r\n                </Button>\r\n                <Modal\r\n                    title=\"Create New Post\"\r\n                    visible={visible}\r\n                    onOk={this.handleOk}\r\n                    okText='Create'\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <CreatePostForm ref={this.getFormRef}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\nimport PropTypes from 'prop-types';\r\nimport blueMarkerUrl from '../assets/images/blue-marker.svg';\r\n\r\nexport class AroundMarker extends React.Component {\r\n    static propTypes = {\r\n        post: PropTypes.object.isRequired,\r\n    }\r\n\r\n    state = {\r\n        isOpen: false,\r\n    }\r\n\r\n    handleToggle = () => {\r\n        this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n    }\r\n\r\n    render() {\r\n        const { user, message, url, location, type } = this.props.post;\r\n        const { lat, lon } = location;\r\n        const isImagePost = type === 'image';\r\n        const customIcon = isImagePost ? undefined : {\r\n            url: blueMarkerUrl,\r\n            scaledSize: new window.google.maps.Size(26, 41),\r\n        };\r\n        return (\r\n            <Marker\r\n                position={{ lat, lng: lon }}\r\n                onMouseOver={isImagePost ? this.handleToggle : undefined}\r\n                onMouseOut={isImagePost ? this.handleToggle : undefined}\r\n                onClick={isImagePost ? undefined: this.handleToggle}\r\n                icon={customIcon}\r\n            >\r\n                {this.state.isOpen ? (\r\n                    <InfoWindow>\r\n                        <div>\r\n                            {isImagePost\r\n                                ? <img src={url} alt={message} className=\"around-marker-image\"/>\r\n                                : <video src={url} controls className=\"around-marker-video\"/>}\r\n                            <p>{`${user}: ${message}`}</p>\r\n                        </div>\r\n                    </InfoWindow>\r\n                ) : null}\r\n            </Marker>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {\r\n    withScriptjs,\r\n    withGoogleMap,\r\n    GoogleMap,\r\n} from \"react-google-maps\";\r\nimport { AroundMarker } from './AroundMarker';\r\nimport { POS_KEY } from '../constants';\r\n\r\nclass NormalAroundMap extends React.Component {\r\n    reloadMarker = () => {\r\n        const center = this.getCenter();\r\n        const radius = this.getRadius();\r\n        this.props.loadPostsByTopic(center, radius);\r\n    }\r\n\r\n    getCenter() {\r\n        const center = this.map.getCenter();\r\n        return { lat: center.lat(), lon: center.lng() };\r\n    }\r\n\r\n    getRadius() {\r\n        const center = this.map.getCenter();\r\n        const bounds = this.map.getBounds();\r\n        if (center && bounds) {\r\n            const ne = bounds.getNorthEast();\r\n            const right = new window.google.maps.LatLng(center.lat(), ne.lng());\r\n            return 0.001 * window.google.maps.geometry.spherical.computeDistanceBetween(center, right);\r\n        }\r\n    }\r\n\r\n\r\n    getMapRef = (mapInstance) => {\r\n        this.map = mapInstance;\r\n        window.map = mapInstance;\r\n    }\r\n\r\n    render() {\r\n        const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\r\n        return (\r\n            <GoogleMap\r\n                ref={this.getMapRef}\r\n                defaultZoom={11}\r\n                defaultCenter={{ lat, lng: lon }}\r\n                onDragEnd={this.reloadMarker}\r\n                onZoomChanged={this.reloadMarker}\r\n            >\r\n                {this.props.posts.map((post) => <AroundMarker post={post} key={post.url} />)}\r\n            </GoogleMap>\r\n        );\r\n    }\r\n}\r\n\r\nexport const AroundMap = withScriptjs(withGoogleMap(NormalAroundMap));\r\n","import React from 'react';\r\nimport { Tabs, Spin, Row, Col, Radio } from 'antd';\r\nimport {\r\n    GEO_OPTIONS,\r\n    POS_KEY,\r\n    API_ROOT,\r\n    AUTH_HEADER,\r\n    TOKEN_KEY,\r\n    POST_TYPE_IMAGE,\r\n    POST_TYPE_VIDEO,\r\n    POST_TYPE_UNKNOWN,\r\n    TOPIC_AROUND,\r\n    TOPIC_FACE,\r\n} from '../constants';\r\nimport { Gallery } from './Gallery';\r\nimport { CreatePostButton } from './CreatePostButton';\r\nimport { AroundMap } from './AroundMap';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport class Home extends React.Component {\r\n    state = {\r\n        isLoadingGeoLocation: false,\r\n        isLoadingPosts: false,\r\n        error: '',\r\n        posts: [],\r\n        topic: TOPIC_AROUND,\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            this.setState({ isLoadingGeoLocation: true, error: '' });\r\n            navigator.geolocation.getCurrentPosition(\r\n                this.onSuccessLoadGeoLocation,\r\n                this.onFailedLoadGeoLocation,\r\n                GEO_OPTIONS,\r\n            );\r\n        } else {\r\n            this.setState({ error: 'Geolocation is not supported.'});\r\n        }\r\n    }\r\n\r\n    onSuccessLoadGeoLocation = (position) => {\r\n        console.log(position);\r\n        const { latitude, longitude } = position.coords;\r\n        localStorage.setItem(POS_KEY, JSON.stringify({ lat: latitude, lon: longitude }));\r\n        this.setState({ isLoadingGeoLocation: false, error: '' });\r\n        this.loadNearbyPosts();\r\n    }\r\n\r\n    onFailedLoadGeoLocation = () => {\r\n        this.setState({ isLoadingGeoLocation: false, error: 'Failed to load geo location.' });\r\n    }\r\n\r\n    loadNearbyPosts = (center, radius) => {\r\n        const { lat, lon } = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\r\n        const range = radius ? radius : 20;\r\n        const token = localStorage.getItem(TOKEN_KEY);\r\n        this.setState({ isLoadingPosts: true, error: '' });\r\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${AUTH_HEADER} ${token}`,\r\n            }\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error('Failed to load posts.');\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                this.setState({ isLoadingPosts: false, error: e.message });\r\n            });\r\n    }\r\n\r\n    renderImagePosts() {\r\n        const { posts } = this.state;\r\n        const images = posts\r\n            .filter((post) => post.type === POST_TYPE_IMAGE)\r\n            .map((post) => {\r\n                return {\r\n                    user: post.user,\r\n                    src: post.url,\r\n                    thumbnail: post.url,\r\n                    caption: post.message,\r\n                    thumbnailWidth: 400,\r\n                    thumbnailHeight: 300,\r\n                };\r\n            });\r\n        return <Gallery images={images}/>\r\n    }\r\n\r\n    renderVideoPosts() {\r\n        const { posts } = this.state;\r\n        return (\r\n            <Row gutter={30}>\r\n                {\r\n                    posts\r\n                        .filter((post) => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type))\r\n                        .map((post) => (\r\n                            <Col span={6} key={post.url}>\r\n                                <video src={post.url} controls={true} className=\"video-block\"/>\r\n                                <p>{post.user}: {post.message}</p>\r\n                            </Col>\r\n                        ))\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    renderPosts(type) {\r\n        const { error, isLoadingGeoLocation, isLoadingPosts, posts } = this.state;\r\n        if (error) {\r\n            return error;\r\n        } else if (isLoadingGeoLocation) {\r\n            return <Spin tip=\"Loading geo location...\"/>;\r\n        } else if (isLoadingPosts) {\r\n            return <Spin tip=\"Loading posts...\"/>\r\n        } else if (posts.length > 0) {\r\n            return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\r\n        } else {\r\n            return 'No nearby posts';\r\n        }\r\n    }\r\n\r\n    handleTopicChange = (e) => {\r\n        const topic = e.target.value;\r\n        this.setState({ topic });\r\n        if (topic === TOPIC_AROUND) {\r\n            this.loadNearbyPosts();\r\n        } else {\r\n            this.loadFacesAroundTheWolrd();\r\n        }\r\n    }\r\n\r\n    loadFacesAroundTheWolrd = () => {\r\n        const token = localStorage.getItem(TOKEN_KEY);\r\n        this.setState({ isLoadingPosts: true, error: '' });\r\n        return fetch(`${API_ROOT}/cluster?term=face`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${AUTH_HEADER} ${token}`,\r\n            }\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error('Failed to load posts');\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                this.setState({ isLoadingPosts: false , error: e.message });\r\n            });\r\n    }\r\n\r\n    loadPostsByTopic = (center, radius) => {\r\n        if (this.state.topic === TOPIC_AROUND) {\r\n            return this.loadNearbyPosts(center, radius);\r\n        } else {\r\n            return this.loadFacesAroundTheWolrd();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const operations = (\r\n            <CreatePostButton loadPostsByTopic={this.loadPostsByTopic}/>\r\n        );\r\n        return (\r\n            <div>\r\n                <Radio.Group onChange={this.handleTopicChange} value={this.state.topic}>\r\n                    <Radio value={TOPIC_AROUND}>Posts Around Me</Radio>\r\n                    <Radio value={TOPIC_FACE}>Faces Around The World</Radio>\r\n                </Radio.Group>\r\n                <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\r\n                    <TabPane tab=\"Image Posts\" key=\"1\">\r\n                        {this.renderPosts(POST_TYPE_IMAGE)}\r\n                    </TabPane>\r\n                    <TabPane tab=\"Video Posts\" key=\"2\">\r\n                        {this.renderPosts(POST_TYPE_VIDEO)}\r\n                    </TabPane>\r\n                    <TabPane tab=\"Map\" key=\"3\">\r\n                        <AroundMap\r\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\"\r\n                            loadingElement={<div style={{ height: `100%` }} />}\r\n                            containerElement={<div style={{ height: `600px` }} />}\r\n                            mapElement={<div style={{ height: `100%` }} />}\r\n                            posts={this.state.posts}\r\n                            loadPostsByTopic={this.loadPostsByTopic}\r\n                        />\r\n                    </TabPane>\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Register } from './Register';\r\nimport { Login } from './Login';\r\nimport { Home } from './Home';\r\nimport { Switch, Route, Redirect } from 'react-router'\r\n\r\nexport class Main extends React.Component {\r\n    getLogin = () => {\r\n        return this.props.isLoggedIn ? <Redirect to=\"/home\"/> : <Login handleLoginSucceed={this.props.handleLoginSucceed}/>;\r\n    }\r\n\r\n    getHome = () => {\r\n        return this.props.isLoggedIn ? <Home/> : <Redirect to=\"/login\"/>;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={this.getLogin}/>\r\n                    <Route path=\"/login\" render={this.getLogin}/>\r\n                    <Route path=\"/register\" component={Register}/>\r\n                    <Route path=\"/home\" render={this.getHome}/>\r\n                    <Route render={this.getLogin}/>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport { TopBar } from './TopBar';\nimport { Main } from './Main';\nimport { TOKEN_KEY } from '../constants';\n\nimport '../styles/App.css';\n\nclass App extends React.Component {\n    state = {\n        isLoggedIn: Boolean(localStorage.getItem(TOKEN_KEY)),\n    }\n\n    handleLoginSucceed = (token) => {\n        localStorage.setItem(TOKEN_KEY, token)\n        this.setState({ isLoggedIn: true });\n    }\n\n    handleLogout = () => {\n        localStorage.removeItem(TOKEN_KEY);\n        this.setState({ isLoggedIn: false });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TopBar handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n                <Main handleLoginSucceed={this.handleLoginSucceed} isLoggedIn={this.state.isLoggedIn}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}