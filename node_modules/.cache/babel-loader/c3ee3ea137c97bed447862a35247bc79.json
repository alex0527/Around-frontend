{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Desktop\\\\around\\\\around-web\\\\src\\\\components\\\\Home.js\";\nimport React from 'react';\nimport { Tabs, Spin, Row, Col, Radio } from 'antd';\nimport { GEO_OPTIONS, POS_KEY, API_ROOT, AUTH_HEADER, TOKEN_KEY, POST_TYPE_IMAGE, POST_TYPE_VIDEO, POST_TYPE_UNKNOWN, TOPIC_AROUND, TOPIC_FACE } from '../constants';\nimport { Gallery } from './Gallery';\nimport { CreatePostButton } from './CreatePostButton';\nimport { AroundMap } from './AroundMap';\nconst {\n  TabPane\n} = Tabs;\nexport class Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoadingGeoLocation: false,\n      isLoadingPosts: false,\n      error: '',\n      posts: [],\n      topic: TOPIC_AROUND\n    };\n\n    this.onSuccessLoadGeoLocation = position => {\n      console.log(position);\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      localStorage.setItem(POS_KEY, JSON.stringify({\n        lat: latitude,\n        lon: longitude\n      }));\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: ''\n      });\n      this.loadNearbyPosts();\n    };\n\n    this.onFailedLoadGeoLocation = () => {\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: 'Failed to load geo location.'\n      });\n    };\n\n    this.loadNearbyPosts = (center, radius) => {\n      const {\n        lat,\n        lon\n      } = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\n      const range = radius ? radius : 20;\n      const token = localStorage.getItem(TOKEN_KEY);\n      this.setState({\n        isLoadingPosts: true,\n        error: ''\n      });\n      return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Failed to load posts.');\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          posts: data ? data : [],\n          isLoadingPosts: false\n        });\n      }).catch(e => {\n        console.error(e);\n        this.setState({\n          isLoadingPosts: false,\n          error: e.message\n        });\n      });\n    };\n\n    this.handleTopicChange = e => {\n      const topic = e.target.value;\n      this.setState({\n        topic\n      });\n\n      if (topic === TOPIC_AROUND) {\n        this.loadNearbyPosts();\n      } else {\n        this.loadFacesAroundTheWolrd();\n      }\n    };\n\n    this.loadFacesAroundTheWolrd = () => {\n      const token = localStorage.getItem(TOKEN_KEY);\n      this.setState({\n        isLoadingPosts: true,\n        error: ''\n      });\n      return fetch(`${API_ROOT}/cluster?term=face`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Failed to load posts');\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          posts: data ? data : [],\n          isLoadingPosts: false\n        });\n      }).catch(e => {\n        console.error(e);\n        this.setState({\n          isLoadingPosts: false,\n          error: e.message\n        });\n      });\n    };\n\n    this.loadPostsByTopic = (center, radius) => {\n      if (this.state.topic === TOPIC_AROUND) {\n        return this.loadNearbyPosts(center, radius);\n      } else {\n        return this.loadFacesAroundTheWolrd();\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (\"geolocation\" in navigator) {\n      this.setState({\n        isLoadingGeoLocation: true,\n        error: ''\n      });\n      navigator.geolocation.getCurrentPosition(this.onSuccessLoadGeoLocation, this.onFailedLoadGeoLocation, GEO_OPTIONS);\n    } else {\n      this.setState({\n        error: 'Geolocation is not supported.'\n      });\n    }\n  }\n\n  renderImagePosts() {\n    const {\n      posts\n    } = this.state;\n    const images = posts.filter(post => post.type === POST_TYPE_IMAGE).map(post => {\n      return {\n        user: post.user,\n        src: post.url,\n        thumbnail: post.url,\n        caption: post.message,\n        thumbnailWidth: 400,\n        thumbnailHeight: 300\n      };\n    });\n    return /*#__PURE__*/React.createElement(Gallery, {\n      images: images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }\n    });\n  }\n\n  renderVideoPosts() {\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Row, {\n      gutter: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, posts.filter(post => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type)).map(post => /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      key: post.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      src: post.url,\n      controls: true,\n      className: \"video-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }, post.user, \": \", post.message))));\n  }\n\n  renderPosts(type) {\n    const {\n      error,\n      isLoadingGeoLocation,\n      isLoadingPosts,\n      posts\n    } = this.state;\n\n    if (error) {\n      return error;\n    } else if (isLoadingGeoLocation) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading geo location...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 20\n        }\n      });\n    } else if (isLoadingPosts) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading posts...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 20\n        }\n      });\n    } else if (posts.length > 0) {\n      return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\n    } else {\n      return 'No nearby posts';\n    }\n  }\n\n  render() {\n    const operations = /*#__PURE__*/React.createElement(CreatePostButton, {\n      loadPostsByTopic: this.loadPostsByTopic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: this.handleTopicChange,\n      value: this.state.topic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      value: TOPIC_AROUND,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, \"Posts Around Me\"), /*#__PURE__*/React.createElement(Radio, {\n      value: TOPIC_FACE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, \"Faces Around The World\")), /*#__PURE__*/React.createElement(Tabs, {\n      tabBarExtraContent: operations,\n      className: \"main-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Image Posts\",\n      key: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, this.renderPosts(POST_TYPE_IMAGE)), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Video Posts\",\n      key: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, this.renderPosts(POST_TYPE_VIDEO)), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Map\",\n      key: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AroundMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 45\n        }\n      }),\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `600px`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 47\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 41\n        }\n      }),\n      posts: this.state.posts,\n      loadPostsByTopic: this.loadPostsByTopic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jiang/Desktop/around/around-web/src/components/Home.js"],"names":["React","Tabs","Spin","Row","Col","Radio","GEO_OPTIONS","POS_KEY","API_ROOT","AUTH_HEADER","TOKEN_KEY","POST_TYPE_IMAGE","POST_TYPE_VIDEO","POST_TYPE_UNKNOWN","TOPIC_AROUND","TOPIC_FACE","Gallery","CreatePostButton","AroundMap","TabPane","Home","Component","state","isLoadingGeoLocation","isLoadingPosts","error","posts","topic","onSuccessLoadGeoLocation","position","console","log","latitude","longitude","coords","localStorage","setItem","JSON","stringify","lat","lon","setState","loadNearbyPosts","onFailedLoadGeoLocation","center","radius","parse","getItem","range","token","fetch","method","headers","Authorization","then","response","ok","json","Error","data","catch","e","message","handleTopicChange","target","value","loadFacesAroundTheWolrd","loadPostsByTopic","componentDidMount","navigator","geolocation","getCurrentPosition","renderImagePosts","images","filter","post","type","map","user","src","url","thumbnail","caption","thumbnailWidth","thumbnailHeight","renderVideoPosts","includes","renderPosts","length","render","operations","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Tabs, Spin, Row, Col, Radio } from 'antd';\r\nimport {\r\n    GEO_OPTIONS,\r\n    POS_KEY,\r\n    API_ROOT,\r\n    AUTH_HEADER,\r\n    TOKEN_KEY,\r\n    POST_TYPE_IMAGE,\r\n    POST_TYPE_VIDEO,\r\n    POST_TYPE_UNKNOWN,\r\n    TOPIC_AROUND,\r\n    TOPIC_FACE,\r\n} from '../constants';\r\nimport { Gallery } from './Gallery';\r\nimport { CreatePostButton } from './CreatePostButton';\r\nimport { AroundMap } from './AroundMap';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport class Home extends React.Component {\r\n    state = {\r\n        isLoadingGeoLocation: false,\r\n        isLoadingPosts: false,\r\n        error: '',\r\n        posts: [],\r\n        topic: TOPIC_AROUND,\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            this.setState({ isLoadingGeoLocation: true, error: '' });\r\n            navigator.geolocation.getCurrentPosition(\r\n                this.onSuccessLoadGeoLocation,\r\n                this.onFailedLoadGeoLocation,\r\n                GEO_OPTIONS,\r\n            );\r\n        } else {\r\n            this.setState({ error: 'Geolocation is not supported.'});\r\n        }\r\n    }\r\n\r\n    onSuccessLoadGeoLocation = (position) => {\r\n        console.log(position);\r\n        const { latitude, longitude } = position.coords;\r\n        localStorage.setItem(POS_KEY, JSON.stringify({ lat: latitude, lon: longitude }));\r\n        this.setState({ isLoadingGeoLocation: false, error: '' });\r\n        this.loadNearbyPosts();\r\n    }\r\n\r\n    onFailedLoadGeoLocation = () => {\r\n        this.setState({ isLoadingGeoLocation: false, error: 'Failed to load geo location.' });\r\n    }\r\n\r\n    loadNearbyPosts = (center, radius) => {\r\n        const { lat, lon } = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\r\n        const range = radius ? radius : 20;\r\n        const token = localStorage.getItem(TOKEN_KEY);\r\n        this.setState({ isLoadingPosts: true, error: '' });\r\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${AUTH_HEADER} ${token}`,\r\n            }\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error('Failed to load posts.');\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                this.setState({ isLoadingPosts: false, error: e.message });\r\n            });\r\n    }\r\n\r\n    renderImagePosts() {\r\n        const { posts } = this.state;\r\n        const images = posts\r\n            .filter((post) => post.type === POST_TYPE_IMAGE)\r\n            .map((post) => {\r\n                return {\r\n                    user: post.user,\r\n                    src: post.url,\r\n                    thumbnail: post.url,\r\n                    caption: post.message,\r\n                    thumbnailWidth: 400,\r\n                    thumbnailHeight: 300,\r\n                };\r\n            });\r\n        return <Gallery images={images}/>\r\n    }\r\n\r\n    renderVideoPosts() {\r\n        const { posts } = this.state;\r\n        return (\r\n            <Row gutter={30}>\r\n                {\r\n                    posts\r\n                        .filter((post) => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type))\r\n                        .map((post) => (\r\n                            <Col span={6} key={post.url}>\r\n                                <video src={post.url} controls={true} className=\"video-block\"/>\r\n                                <p>{post.user}: {post.message}</p>\r\n                            </Col>\r\n                        ))\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    renderPosts(type) {\r\n        const { error, isLoadingGeoLocation, isLoadingPosts, posts } = this.state;\r\n        if (error) {\r\n            return error;\r\n        } else if (isLoadingGeoLocation) {\r\n            return <Spin tip=\"Loading geo location...\"/>;\r\n        } else if (isLoadingPosts) {\r\n            return <Spin tip=\"Loading posts...\"/>\r\n        } else if (posts.length > 0) {\r\n            return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\r\n        } else {\r\n            return 'No nearby posts';\r\n        }\r\n    }\r\n\r\n    handleTopicChange = (e) => {\r\n        const topic = e.target.value;\r\n        this.setState({ topic });\r\n        if (topic === TOPIC_AROUND) {\r\n            this.loadNearbyPosts();\r\n        } else {\r\n            this.loadFacesAroundTheWolrd();\r\n        }\r\n    }\r\n\r\n    loadFacesAroundTheWolrd = () => {\r\n        const token = localStorage.getItem(TOKEN_KEY);\r\n        this.setState({ isLoadingPosts: true, error: '' });\r\n        return fetch(`${API_ROOT}/cluster?term=face`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${AUTH_HEADER} ${token}`,\r\n            }\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error('Failed to load posts');\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                this.setState({ isLoadingPosts: false , error: e.message });\r\n            });\r\n    }\r\n\r\n    loadPostsByTopic = (center, radius) => {\r\n        if (this.state.topic === TOPIC_AROUND) {\r\n            return this.loadNearbyPosts(center, radius);\r\n        } else {\r\n            return this.loadFacesAroundTheWolrd();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const operations = (\r\n            <CreatePostButton loadPostsByTopic={this.loadPostsByTopic}/>\r\n        );\r\n        return (\r\n            <div>\r\n                <Radio.Group onChange={this.handleTopicChange} value={this.state.topic}>\r\n                    <Radio value={TOPIC_AROUND}>Posts Around Me</Radio>\r\n                    <Radio value={TOPIC_FACE}>Faces Around The World</Radio>\r\n                </Radio.Group>\r\n                <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\r\n                    <TabPane tab=\"Image Posts\" key=\"1\">\r\n                        {this.renderPosts(POST_TYPE_IMAGE)}\r\n                    </TabPane>\r\n                    <TabPane tab=\"Video Posts\" key=\"2\">\r\n                        {this.renderPosts(POST_TYPE_VIDEO)}\r\n                    </TabPane>\r\n                    <TabPane tab=\"Map\" key=\"3\">\r\n                        <AroundMap\r\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\"\r\n                            loadingElement={<div style={{ height: `100%` }} />}\r\n                            containerElement={<div style={{ height: `600px` }} />}\r\n                            mapElement={<div style={{ height: `100%` }} />}\r\n                            posts={this.state.posts}\r\n                            loadPostsByTopic={this.loadPostsByTopic}\r\n                        />\r\n                    </TabPane>\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}